<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kai.mybatis.dao.EmployeeMapperDynamicSQL">

    <!--
    if判断：
    choose（when，otherwise）：分支选择；带了break的switch-case
        如果到了id就用id查，如果带了lastName就用lastName查；只会进入其中一个
    trim 字符串截取(where(封装查询条件), set(封装修改条件))
    foreach

    -->


    <select id="getEmpsByConditionIf" resultType="com.kai.mybatis.bean.Employee">
        select * from tbl_employee
        <!-- where -->
        <where>
            <!-- test, 判断表达式（OGNL)
            OGNL参照ppt或者官方文档

            遇见特殊符号应该去写转义字符：
            &&：&amp;
            "":&quot;
             -->
            <if test="id!=null">
                id=#{id}
            </if>
            <if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
                and last_name like #{lastName}
            </if>
            <if test="email!=null and email.trim()!=&quot;&quot;">
                and email = #{email}
            </if>
            <!-- ognl会进行字符串与数字的转换判断 "0"==0-->
            <if test="gender==0 or gender==1">
                and gender=#{gender}
            </if>
        </where>
    </select>


    <select id="getEmpsByConditionTrim" resultType="com.kai.mybatis.bean.Employee">
        select * from tbl_employee
        <!-- 后面多出来的and或者or where标签不能解决
            prefix="":前缀，trim标签体中是整个字符串拼串后的结果。
                    prefix给拼串后的整个字符串加一个前缀
            prefixOverrides=""
                    前缀覆盖，去掉整个字符串前面多余的字符
            suffix="":后缀
                    suffix给拼串后的整个字符串加一个后缀
             suffixOverrides=""
                    后缀覆盖：去掉整个字符串后面多余的字符
        -->
        <!--自定义字符串截取规则-->
        <trim prefix="where" suffixOverrides="and">
            <if test="id!=null">
                id=#{id} and
            </if>
            <if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
                last_name like #{lastName} and
            </if>
            <if test="email!=null and email.trim()!=&quot;&quot;">
                email = #{email} and
            </if>
            <!-- ognl会进行字符串与数字的转换判断 "0"==0-->
            <if test="gender==0 or gender==1">
                gender=#{gender}
            </if>
        </trim>

    </select>

    <select id="getEmpsByConditionChoose" resultType="com.kai.mybatis.bean.Employee">
        select * from tbl_employee
        <where>

            <!--如果到了id就用id查，如果带了lastName就用lastName查；只会进入其中一个-->
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
                    last_name like #{lastName}
                </when>
                <when test="email!=null and email.trim()!=&quot;&quot;">
                    email = #{email}
                </when>
                <otherwise>
                    gender=0
                </otherwise>
            </choose>
        </where>
    </select>

    <update id="updateEmp">
        update tbl_employee

        <!--
            <set>
               <if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
                   last_name = #{lastName},
               </if>
               <if test="email!=null and email.trim()!=&quot;&quot;">
                   email = #{email},
               </if>
               <if test="gender==0 or gender==1">
                   gender=#{gender}
               </if>
            </set>
        -->

        <trim prefix="set" suffixOverrides=",">
            <if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
                last_name = #{lastName},
            </if>
            <if test="email!=null and email.trim()!=&quot;&quot;">
                email = #{email},
            </if>
            <if test="gender==0 or gender==1">
                gender=#{gender}
            </if>
        </trim>


        where id=#{id}
    </update>

    <select id="getEmpsByConditionForeach" resultType="com.kai.mybatis.bean.Employee">
        select * from tbl_employee
        <!--
            collection:指定要遍历的集合
                list类型的参数会特殊处理封装在map中，map的key就叫list
            item：将遍历出的元素赋值给指定变量
            separator:每个元素之间的分隔符
            open：遍历出所有结果拼接一个开始的字符
            close：遍历出所有结果拼接一个结束的字符
            index：索引。遍历list的时候是index就是索引，item就是当前值
                        遍历map的时候index表示的就是map的key，item就是map的值

            #{变量名}就能取出变量的值也就是当前遍历出的元素
        -->
        <foreach collection="ids" item="item_id" separator=","
                 open=" where id in (" close=")">
            #{item_id}
        </foreach>
    </select>

    <!-- 批量保存 方式一 -->
    <insert id="addEmps">
        insert into tbl_employee(
        <include refid="insertColumn"></include>
        ) values
        <foreach collection="emps" item="emp" separator=",">
            (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})
        </foreach>
    </insert>

    <!-- 批量保存 方式二(需要数据库连接属性allowMultiQueries=true)
            这种分隔多个sql可以用于其它的批量操作（删除、修改）
    -->
    <!--<insert id="addEmps">-->
    <!--    <foreach collection="emps" item="emp" separator=";">-->
    <!--        insert into tbl_employee(last_name,email,gender,d_id) values-->
    <!--        (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})-->
    <!--    </foreach>-->
    <!--</insert>-->

    <!-- Orcal数据库批量保存
            Oracle不支持values(),(),()
            Oracle支持的批量方式
            1、多个insert放在begin - end里面
                begin
                    insert into tbl_employee(last_name,email,gender,d_id) values
                    (employees_seq.nextval, "smith", "smith@kai.com", "1");

                    insert into tbl_employee(last_name,email,gender,d_id) values
                    (employees_seq.nextval, "smith", "smith@kai.com", "1");
                end;
            2、

                insert into employee(employee_id,last_name,email)
                    select employees_sel.nextval,lastName,email from(
                        select 'test_a_01' lastName,'test_a_e01' email from dual
                        union
                        select 'test_a_02' lastName,'test_a_e02' email from dual
                        union
                        select 'test_a_03' lastName,'test_a_e03' email from dual
     -->
    <!-- oracle 批量保存方式 第一种-->
    <insert id="addEmps" databaseId="oracle">
        insert into employee(
        <!-- 引用外部定义的sql-->
        <include refid="insertColumn">
<!--             <property name="testColumn" value="abc"/>-->
        </include>
        )
        -- select employees_sel.nextval,lastName,email from(
        <foreach collection="emps" item="emp" separator="union"
                 open="select employees_sel.nextval,lastName,email from("
                 close=")">
            select #{emp.lastName} lastName,#{emp.email} email from dual
        </foreach>
        -- )
    </insert>

    <!-- oracle 批量保存方式 第二种-->
    <insert id="addEmps" databaseId="oracle">
        -- begin
        <foreach collection="emps" item="emp" open="begin" close="end;">
            insert into tbl_employee(last_name,email,gender,d_id) values
            (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id});
        </foreach>
        -- end;
    </insert>

    <!-- 两个内置参数：
            不只是方法传递过来的参数可以被用来判断，取值。。。
            mybatis默认还要两个内置参数：
            _parameter:代表整个参数
                单个参数：_parameter:就是这个参数
                多个参数：参数会被封装为一个map：_parameter就是代表这个map

            _databaseId:付过配置了databaseIdProvider标签。
                _databaseId就是代表当前数据库的别名Oracle
    -->
    <select id="getEmpsInnerParameter" resultType="com.kai.mybatis.bean.Employee">
        <!-- bind:可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 -->
        <bind name="_lastName" value="'%'+lastName+'%'"/>
        <if test="_databaseId=='mysql'">
            select * from tbl_employee
            <if test="_parameter!=null">
                where last_name like #{_lastName}
            </if>
        </if>
        <if test="_databaseId=='oracle'">
            select * from tbl_employees
            <if test="_parameter!=null">
                where last_name like #{_parameter.lastName}
            </if>
        </if>
    </select>

    <!-- 抽取可重用的sql片段，方便后面引用
            1、sql抽取，经常将要查询的列名，或者插入用的列名抽取出来方便引用
            2、include来引用已经抽取的sql
            3、include还可以自动以一些property，sql标签内部就能使用自定义的属性
                inclued-property:取值的正确方式${prop}
                ${prop},#{不能这样使用}
     -->
    <sql id="insertColumn">
        <if test="_databaseId=='oracle'">
            employee_id,last_name,email
        </if>
        <if test="_databaseId=='mysql'">
            last_name,email,gender,d_id
        </if>
    </sql>


</mapper>