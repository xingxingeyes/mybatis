<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kai.mybatis.dao.EmployeeMapper">
    <!--
        namespace:名称空间 指定为接口的全类名
        id:唯一标识
        resultType:返回值类型
        #{id}:从传递过来的参数中取出id值
        databaseId="mysql" 表示在MySQL环境下执行sql
        databaseId="oracle" 表示在Oracle环境下执行sql
    -->
    <select id="getEmpById" resultType="emp" databaseId="mysql">
        select *
        from tbl_employee
        where id = #{id}
    </select>

    <select id="getEmpByMap" resultType="emp" databaseId="mysql">
        select *
        from ${tableName}
        where id = ${id} and last_name=#{lastName}
    </select>

    <select id="getEmpByIdAndName" resultType="emp" databaseId="mysql">
        select *
        from tbl_employee
        where id = #{id} and last_name=#{param2}
    </select>


    <select id="getEmpById" resultType="emp" databaseId="oracle">
        select id, last_name lastName, email
        from tbl_employee
        where id = #{id}
    </select>
    <!-- parameterType 可省略-->
    <!--
     获取自增主键的值
         mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()
         useGeneratedKeys="true" 使用自增主键获取主键值策略
         keyProperty 指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的那个属性
     -->
    <insert id="addEmp" parameterType="com.kai.mybatis.bean.Employee"
            useGeneratedKeys="true" keyProperty="id">
        insert into tbl_employee(last_name, email, gender)
        values (#{lastName}, #{email}, #{gender})
    </insert>

    <!--
        Oracle不支持自增；Oracle使用序列来模拟自增；
        每次插入的数据的主键是从序列中拿到的值；如何获取到这个值
     -->
    <insert id="addEmp" databaseId="oracle">
        <!--
        keyProperty:查出主键值封装给javaBean的那个属性
        order="BEFORE":当前sql在插入sql之前运行
                AFTER 当前sql在插入sql之后运行
        resultType:查出数据的返回值类型

        -->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            <!-- 编写查询主键的sql语句-->
            select EMPLOYEES_SEQ.nextval from dual
        </selectKey>
        <!-- 插入时主键是从序列中拿到的 -->
        insert into employee(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(#{id},#{lastName},#{eamil})

    </insert>


    <update id="updateEmp">
        update tbl_employee
        set last_name=#{lastName},
            email=#{email},
            gender=#{gender}
        where id = #{id}
    </update>

    <delete id="deleteEmpById">
        delete
        from tbl_employee
        where id = #{id}
    </delete>

</mapper>